        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1156054 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
  1156054:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 54%
branch  1 taken 46%
   623483:   10:        return 1;
   532571:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 86%
branch  1 taken 14%
   455663:   12:        return -1;
    76908:   13:    return 0;
  1156054:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 23 returned 100% blocks executed 94%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
       23:   44:    SelectStream(1);
       23:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
       46:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       23:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
      506:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     5060:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     4370:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
     2300:   65:        }
      230:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       23:   73:    if (numPlayers == 2)
branch  0 taken 61%
branch  1 taken 39%
        -:   74:    {
       14:   75:        state->supplyCount[curse] = 10;
       14:   76:    }
        9:   77:    else if (numPlayers == 3)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        9:   79:        state->supplyCount[curse] = 20;
        9:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       23:   87:    if (numPlayers == 2)
branch  0 taken 61%
branch  1 taken 39%
        -:   88:    {
       14:   89:        state->supplyCount[estate] = 8;
       14:   90:        state->supplyCount[duchy] = 8;
       14:   91:        state->supplyCount[province] = 8;
       14:   92:    }
        -:   93:    else
        -:   94:    {
        9:   95:        state->supplyCount[estate] = 12;
        9:   96:        state->supplyCount[duchy] = 12;
        9:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       23:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       23:  102:    state->supplyCount[silver] = 40;
       23:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      966:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     7590:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:        {
     3565:  110:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      437:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:                {
       46:  115:                    if (numPlayers == 2) {
branch  0 taken 61%
branch  1 taken 39%
       28:  116:                        state->supplyCount[i] = 8;
       28:  117:                    }
        -:  118:                    else {
       18:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
       46:  121:                }
        -:  122:                else
        -:  123:                {
      184:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
      230:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
     3335:  130:                state->supplyCount[i] = -1;
        -:  131:            }
     3335:  132:        }
        -:  133:
      460:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
      156:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  141:    {
       55:  142:        state->deckCount[i] = 0;
      440:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:        {
      165:  145:            state->deck[i][j] = estate;
      165:  146:            state->deckCount[i]++;
      165:  147:        }
      880:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:        {
      385:  150:            state->deck[i][j] = copper;
      385:  151:            state->deckCount[i]++;
      385:  152:        }
       55:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
      156:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  157:    {
       55:  158:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
       55:  162:    }
        -:  163:
        -:  164:    //draw player hands
      156:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  166:    {
        -:  167:        //initialize hand size to zero
       55:  168:        state->handCount[i] = 0;
       55:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
       55:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
     1288:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
      621:  180:        state->embargoTokens[i] = 0;
      621:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
       23:  184:    state->outpostPlayed = 0;
       23:  185:    state->phase = 0;
       23:  186:    state->numActions = 1;
       23:  187:    state->numBuys = 1;
       23:  188:    state->playedCardCount = 0;
       23:  189:    state->whoseTurn = 0;
       23:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
      276:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
      115:  195:        drawCard(state->whoseTurn, state);
      115:  196:    }
        -:  197:
       23:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
       23:  200:    return 0;
       23:  201:}
        -:  202:
function shuffle called 10841984 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
 10841984:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
 10841984:  211:    if (state->deckCount[player] < 1)
branch  0 taken 99%
branch  1 taken 1%
 10794896:  212:        return -1;
    47088:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
  1001202:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
   453513:  217:        card = floor(Random() * state->deckCount[player]);
   453513:  218:        newDeck[newDeckPos] = state->deck[player][card];
   453513:  219:        newDeckPos++;
  2933908:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31%
  1013441:  221:            state->deck[player][i] = state->deck[player][i+1];
  1013441:  222:        }
   453513:  223:        state->deckCount[player]--;
        -:  224:    }
  1001202:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
   453513:  226:        state->deck[player][i] = newDeck[i];
   453513:  227:        state->deckCount[player]++;
   453513:  228:    }
        -:  229:
    47088:  230:    return 0;
 10841984:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:    return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
    #####:  311:}
        -:  312:
function numHandCards called 10058 returned 100% blocks executed 100%
        -:  313:int numHandCards(struct gameState *state) {
    10058:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 5580 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
     5580:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 10058 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
    10058:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
    #####:  409:        }
    #####:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
    #####:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
    #####:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
    #####:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
    #####:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
    #####:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  443:        };
    #####:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
    #####:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
    #####:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
    #####:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
    #####:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
    #####:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  466:        };
    #####:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
    #####:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
    #####:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
    #####:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
    #####:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
    #####:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  489:        };
    #####:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
        -:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
    #####:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
    #####:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
    #####:  522:        }
    #####:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
    #####:  533:        }
    #####:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
    #####:  543:        }
    #####:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
    #####:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
    #####:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 11243834 returned 100% blocks executed 100%
        -:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
 11243834:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 96%
branch  1 taken 4%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
 21595814:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 1%
branch  1 taken 99%
     2140:  572:            state->deck[player][i] = state->discard[player][i];
     2140:  573:            state->discard[player][i] = -1;
     2140:  574:        }
        -:  575:
 10795767:  576:        state->deckCount[player] = state->discardCount[player];
 10795767:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
 10795767:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
 10795767:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
 10795767:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
 10795767:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
 10795767:  597:        if (deckCounter == 0)
branch  0 taken 99%
branch  1 taken 1%
 10794496:  598:            return -1;
        -:  599:
     1271:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1271:  601:        state->deckCount[player]--;
     1271:  602:        state->handCount[player]++;//Increment hand count
     1271:  603:    }
        -:  604:
        -:  605:    else {
   448067:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
   448067:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
   448067:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   448067:  614:        state->deckCount[player]--;
   448067:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
   449338:  618:    return 0;
 11243834:  619:}
        -:  620:
function getCost called 6 returned 100% blocks executed 22%
        -:  621:int getCost(int cardNumber)
        -:  622:{
        6:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 17%
branch  5 taken 50%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 17%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
        1:  634:        return 0;
        -:  635:    case silver:
        3:  636:        return 3;
        -:  637:    case gold:
        1:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
        1:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        6:  682:}
        -:  683:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
    #####:  691:    int currentPlayer = whoseTurn(state);
    #####:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
    #####:  694:    int tributeRevealedCards[2] = {-1, -1};
        -:  695:    int temphand[MAX_HAND];// moved above the if statement
    #####:  696:    int drawntreasure=0;
        -:  697:    int cardDrawn;
    #####:  698:    int z = 0;// this is the counter for the temp hand
    #####:  699:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  700:        nextPlayer = 0;
    #####:  701:    }
        -:  702:
        -:  703:
        -:  704:    //uses switch to select card and perform actions
    #####:  705:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  706:    {
        -:  707:    case adventurer:
    #####:  708:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  709:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  710:                shuffle(currentPlayer, state);
    #####:  711:            }
    #####:  712:            drawCard(currentPlayer, state);
    #####:  713:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  714:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  715:                drawntreasure++;
        -:  716:            else {
    #####:  717:                temphand[z]=cardDrawn;
    #####:  718:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  719:                z++;
        -:  720:            }
        -:  721:        }
    #####:  722:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  723:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  724:            z=z-1;
        -:  725:        }
    #####:  726:        return 0;
        -:  727:
        -:  728:    case council_room:
        -:  729:        //+4 Cards
    #####:  730:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:            drawCard(currentPlayer, state);
    #####:  733:        }
        -:  734:
        -:  735:        //+1 Buy
    #####:  736:        state->numBuys++;
        -:  737:
        -:  738:        //Each other player draws a card
    #####:  739:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:        {
    #####:  741:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  742:            {
    #####:  743:                drawCard(i, state);
    #####:  744:            }
    #####:  745:        }
        -:  746:
        -:  747:        //put played card in played card pile
    #####:  748:        discardCard(handPos, currentPlayer, state, 0);
        -:  749:
    #####:  750:        return 0;
        -:  751:
        -:  752:    case feast:
        -:  753:        //gain card with cost up to 5
        -:  754:        //Backup hand
    #####:  755:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  756:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  757:            state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  758:        }
        -:  759:        //Backup hand
        -:  760:
        -:  761:        //Update Coins for Buy
    #####:  762:        updateCoins(currentPlayer, state, 5);
    #####:  763:        x = 1;//Condition to loop on
    #####:  764:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  765:            if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -:  766:                if (DEBUG)
        -:  767:                    printf("None of that card left, sorry!\n");
        -:  768:
        -:  769:                if (DEBUG) {
        -:  770:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  771:                }
    #####:  772:            }
    #####:  773:            else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####:  774:                printf("That card is too expensive!\n");
        -:  775:
        -:  776:                if (DEBUG) {
        -:  777:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  778:                }
    #####:  779:            }
        -:  780:            else {
        -:  781:
        -:  782:                if (DEBUG) {
        -:  783:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  784:                }
        -:  785:
    #####:  786:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  787:                x = 0;//No more buying cards
        -:  788:
        -:  789:                if (DEBUG) {
        -:  790:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:                }
        -:  792:
        -:  793:            }
        -:  794:        }
        -:  795:
        -:  796:        //Reset Hand
    #####:  797:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  798:            state->hand[currentPlayer][i] = temphand[i];
    #####:  799:            temphand[i] = -1;
    #####:  800:        }
        -:  801:        //Reset Hand
        -:  802:
    #####:  803:        return 0;
        -:  804:
        -:  805:    case gardens:
    #####:  806:        return -1;
        -:  807:
        -:  808:    case mine:
    #####:  809:        mineCard(state, currentPlayer, choice1, choice2, handPos);
        -:  810:        
        -:  811:        /*
        -:  812:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  813:
        -:  814:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  815:        {
        -:  816:            return -1;
        -:  817:        }
        -:  818:
        -:  819:        if (choice2 > treasure_map || choice2 < curse)
        -:  820:        {
        -:  821:            return -1;
        -:  822:        }
        -:  823:
        -:  824:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  825:        {
        -:  826:            return -1;
        -:  827:        }
        -:  828:
        -:  829:        gainCard(choice2, state, 2, currentPlayer);
        -:  830:
        -:  831:        //discard card from hand
        -:  832:        discardCard(handPos, currentPlayer, state, 0);
        -:  833:
        -:  834:        //discard trashed card
        -:  835:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  836:        {
        -:  837:            if (state->hand[currentPlayer][i] == j)
        -:  838:            {
        -:  839:                discardCard(i, currentPlayer, state, 0);
        -:  840:                break;
        -:  841:            }
        -:  842:        }
        -:  843:        */
        -:  844:
        -:  845:        //return 0;
        -:  846:
        -:  847:    case remodel:
    #####:  848:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  851:        {
    #####:  852:            return -1;
        -:  853:        }
        -:  854:
    #####:  855:        gainCard(choice2, state, 0, currentPlayer);
        -:  856:
        -:  857:        //discard card from hand
    #####:  858:        discardCard(handPos, currentPlayer, state, 0);
        -:  859:
        -:  860:        //discard trashed card
    #####:  861:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:        {
    #####:  863:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:            {
    #####:  865:                discardCard(i, currentPlayer, state, 0);
    #####:  866:                break;
        -:  867:            }
    #####:  868:        }
        -:  869:
        -:  870:
    #####:  871:        return 0;
        -:  872:
        -:  873:    case smithy:
        -:  874:        //+3 Cards
    #####:  875:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  876:        {
    #####:  877:            drawCard(currentPlayer, state);
    #####:  878:        }
        -:  879:
        -:  880:        //discard card from hand
    #####:  881:        discardCard(handPos, currentPlayer, state, 0);
    #####:  882:        return 0;
        -:  883:
        -:  884:    case village:
        -:  885:        //+1 Card
    #####:  886:        drawCard(currentPlayer, state);
        -:  887:
        -:  888:        //+2 Actions
    #####:  889:        state->numActions = state->numActions + 2;
        -:  890:
        -:  891:        //discard played card from hand
    #####:  892:        discardCard(handPos, currentPlayer, state, 0);
    #####:  893:        return 0;
        -:  894:
        -:  895:    case baron:
        -:  896:    
    #####:  897:        baronCard(state, choice1, currentPlayer);
        -:  898:        /*
        -:  899:        state->numBuys++;//Increase buys by 1!
        -:  900:        if (choice1 > 0) { //Boolean true or going to discard an estate
        -:  901:            int p = 0;//Iterator for hand!
        -:  902:            int card_not_discarded = 1;//Flag for discard set!
        -:  903:            while(card_not_discarded) {
        -:  904:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
        -:  905:                    state->coins += 4;//Add 4 coins to the amount of coins
        -:  906:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  907:                    state->discardCount[currentPlayer]++;
        -:  908:                    for (; p < state->handCount[currentPlayer]; p++) {
        -:  909:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  910:                    }
        -:  911:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  912:                    state->handCount[currentPlayer]--;
        -:  913:                    card_not_discarded = 0;//Exit the loop
        -:  914:                }
        -:  915:                else if (p > state->handCount[currentPlayer]) {
        -:  916:                    if(DEBUG) {
        -:  917:                        printf("No estate cards in your hand, invalid choice\n");
        -:  918:                        printf("Must gain an estate if there are any\n");
        -:  919:                    }
        -:  920:                    if (supplyCount(estate, state) > 0) {
        -:  921:                        gainCard(estate, state, 0, currentPlayer);
        -:  922:
        -:  923:                        state->supplyCount[estate]--;//Decrement estates
        -:  924:                        if (supplyCount(estate, state) == 0) {
        -:  925:                            isGameOver(state);
        -:  926:                        }
        -:  927:                    }
        -:  928:                    card_not_discarded = 0;//Exit the loop
        -:  929:                }
        -:  930:
        -:  931:                else {
        -:  932:                    p++;//Next card
        -:  933:                }
        -:  934:            }
        -:  935:        }
        -:  936:
        -:  937:        else {
        -:  938:            if (supplyCount(estate, state) > 0) {
        -:  939:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  940:
        -:  941:                state->supplyCount[estate]--;//Decrement Estates
        -:  942:                if (supplyCount(estate, state) == 0) {
        -:  943:                    isGameOver(state);
        -:  944:                }
        -:  945:            }
        -:  946:        }
        -:  947:
        -:  948:    */
        -:  949:        //return 0;
        -:  950:
        -:  951:    case great_hall:
        -:  952:        //+1 Card
    #####:  953:        drawCard(currentPlayer, state);
        -:  954:
        -:  955:        //+1 Actions
    #####:  956:        state->numActions++;
        -:  957:
        -:  958:        //discard card from hand
    #####:  959:        discardCard(handPos, currentPlayer, state, 0);
    #####:  960:        return 0;
        -:  961:
        -:  962:    case minion:
        -:  963:        //+1 action
    #####:  964:        minionCard(state, handPos, currentPlayer, choice1, choice2);
        -:  965:        /*
        -:  966:        state->numActions++;
        -:  967:
        -:  968:        //discard card from hand
        -:  969:        discardCard(handPos, currentPlayer, state, 0);
        -:  970:
        -:  971:		if (choice1)
        -:  972:        {
        -:  973:            state->coins = state->coins + 2;
        -:  974:        }
        -:  975:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:        {
        -:  977:            //discard hand
        -:  978:            while(numHandCards(state) > 0)
        -:  979:            {
        -:  980:                discardCard(handPos, currentPlayer, state, 0);
        -:  981:            }
        -:  982:
        -:  983:            //draw 4
        -:  984:            for (i = 0; i < 4; i++)
        -:  985:            {
        -:  986:                drawCard(currentPlayer, state);
        -:  987:            }
        -:  988:
        -:  989:            //other players discard hand and redraw if hand size > 4
        -:  990:            for (i = 0; i < state->numPlayers; i++)
        -:  991:            {
        -:  992:                if (i != currentPlayer)
        -:  993:                {
        -:  994:                    if ( state->handCount[i] > 4 )
        -:  995:                    {
        -:  996:                        //discard hand
        -:  997:                        while( state->handCount[i] > 0 )
        -:  998:                        {
        -:  999:                            discardCard(handPos, i, state, 0);
        -: 1000:                        }
        -: 1001:
        -: 1002:                        //draw 4
        -: 1003:                        for (j = 0; j < 4; j++)
        -: 1004:                        {
        -: 1005:                            drawCard(i, state);
        -: 1006:                        }
        -: 1007:                    }
        -: 1008:                }
        -: 1009:            }
        -: 1010:
        -: 1011:        }
        -: 1012:        */
        -: 1013:        //return 0;
        -: 1014:
        -: 1015:    case steward:
    #####: 1016:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1017:        {
        -: 1018:            //+2 cards
    #####: 1019:            drawCard(currentPlayer, state);
    #####: 1020:            drawCard(currentPlayer, state);
    #####: 1021:        }
    #####: 1022:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1023:        {
        -: 1024:            //+2 coins
    #####: 1025:            state->coins = state->coins + 2;
    #####: 1026:        }
        -: 1027:        else
        -: 1028:        {
        -: 1029:            //trash 2 cards in hand
    #####: 1030:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1031:            discardCard(choice3, currentPlayer, state, 1);
        -: 1032:        }
        -: 1033:
        -: 1034:        //discard card from hand
    #####: 1035:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1036:        return 0;
        -: 1037:
        -: 1038:    case tribute:
    #####: 1039:        tributeCard(state, nextPlayer, currentPlayer, tributeRevealedCards);
        -: 1040:        /*
        -: 1041:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
        -: 1042:            if (state->deckCount[nextPlayer] > 0) {
        -: 1043:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1044:                state->deckCount[nextPlayer]--;
        -: 1045:            }
        -: 1046:            else if (state->discardCount[nextPlayer] > 0) {
        -: 1047:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1048:                state->discardCount[nextPlayer]--;
        -: 1049:            }
        -: 1050:            else {
        -: 1051:                //No Card to Reveal
        -: 1052:                if (DEBUG) {
        -: 1053:                    printf("No cards to reveal\n");
        -: 1054:                }
        -: 1055:            }
        -: 1056:        }
        -: 1057:
        -: 1058:        else {
        -: 1059:            if (state->deckCount[nextPlayer] == 0) {
        -: 1060:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
        -: 1061:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1062:                    state->deckCount[nextPlayer]++;
        -: 1063:                    state->discard[nextPlayer][i] = -1;
        -: 1064:                    state->discardCount[nextPlayer]--;
        -: 1065:                }
        -: 1066:
        -: 1067:                shuffle(nextPlayer,state);//Shuffle the deck
        -: 1068:            }
        -: 1069:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1070:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1071:            state->deckCount[nextPlayer]--;
        -: 1072:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1073:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1074:            state->deckCount[nextPlayer]--;
        -: 1075:        }
        -: 1076:
        -: 1077:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
        -: 1078:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1079:            state->playedCardCount++;
        -: 1080:            tributeRevealedCards[1] = -1;
        -: 1081:        }
        -: 1082:
        -: 1083:        for (i = 0; i <= 2; i ++) {
        -: 1084:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
        -: 1085:                state->coins += 2;
        -: 1086:            }
        -: 1087:
        -: 1088:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
        -: 1089:                drawCard(currentPlayer, state);
        -: 1090:                drawCard(currentPlayer, state);
        -: 1091:            }
        -: 1092:            else { //Action Card
        -: 1093:                state->numActions = state->numActions + 2;
        -: 1094:            }
        -: 1095:        }
        -: 1096:   
        -: 1097:        return 0;
        -: 1098: */
        -: 1099:    case ambassador:
    #####: 1100:        ambassadorCard(choice1, choice2, currentPlayer, handPos, state);
        -: 1101:        /*
        -: 1102:        j = 0;		//used to check if player has enough cards to discard
        -: 1103:
        -: 1104:        if (choice2 > 2 || choice2 < 0)
        -: 1105:        {
        -: 1106:            return -1;
        -: 1107:        }
        -: 1108:
        -: 1109:        if (choice1 == handPos)
        -: 1110:        {
        -: 1111:            return -1;
        -: 1112:        }
        -: 1113:
        -: 1114:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:        {
        -: 1116:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1117:            {
        -: 1118:                j++;
        -: 1119:            }
        -: 1120:        }
        -: 1121:        if (j < choice2)
        -: 1122:        {
        -: 1123:            return -1;
        -: 1124:        }
        -: 1125:
        -: 1126:        if (DEBUG)
        -: 1127:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1128:
        -: 1129:        //increase supply count for choosen card by amount being discarded
        -: 1130:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1131:
        -: 1132:        //each other player gains a copy of revealed card
        -: 1133:        for (i = 0; i < state->numPlayers; i++)
        -: 1134:        {
        -: 1135:            if (i != currentPlayer)
        -: 1136:            {
        -: 1137:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1138:            }
        -: 1139:        }
        -: 1140:
        -: 1141:        //discard played card from hand
        -: 1142:        discardCard(handPos, currentPlayer, state, 0);
        -: 1143:
        -: 1144:        //trash copies of cards returned to supply
        -: 1145:        for (j = 0; j < choice2; j++)
        -: 1146:        {
        -: 1147:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1148:            {
        -: 1149:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1150:                {
        -: 1151:                    discardCard(i, currentPlayer, state, 1);
        -: 1152:                    break;
        -: 1153:                }
        -: 1154:            }
        -: 1155:        }
        -: 1156:
        -: 1157:        return 0;
        -: 1158:    */
        -: 1159:    case cutpurse:
        -: 1160:
    #####: 1161:        updateCoins(currentPlayer, state, 2);
    #####: 1162:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1163:        {
    #####: 1164:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1165:            {
    #####: 1166:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1167:                {
    #####: 1168:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1169:                    {
    #####: 1170:                        discardCard(j, i, state, 0);
    #####: 1171:                        break;
        -: 1172:                    }
    #####: 1173:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1174:                    {
    #####: 1175:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1176:                        {
        -: 1177:                            if (DEBUG)
        -: 1178:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1179:                        }
    #####: 1180:                        break;
        -: 1181:                    }
    #####: 1182:                }
        -: 1183:
    #####: 1184:            }
        -: 1185:
    #####: 1186:        }
        -: 1187:
        -: 1188:        //discard played card from hand
    #####: 1189:        discardCard(handPos, currentPlayer, state, 0);
        -: 1190:
    #####: 1191:        return 0;
        -: 1192:
        -: 1193:
        -: 1194:    case embargo:
        -: 1195:        //+2 Coins
    #####: 1196:        state->coins = state->coins + 2;
        -: 1197:
        -: 1198:        //see if selected pile is in play
    #####: 1199:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1200:        {
    #####: 1201:            return -1;
        -: 1202:        }
        -: 1203:
        -: 1204:        //add embargo token to selected supply pile
    #####: 1205:        state->embargoTokens[choice1]++;
        -: 1206:
        -: 1207:        //trash card
    #####: 1208:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:        return 0;
        -: 1210:
        -: 1211:    case outpost:
        -: 1212:        //set outpost flag
    #####: 1213:        state->outpostPlayed++;
        -: 1214:
        -: 1215:        //discard card
    #####: 1216:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:        return 0;
        -: 1218:
        -: 1219:    case salvager:
        -: 1220:        //+1 buy
    #####: 1221:        state->numBuys++;
        -: 1222:
    #####: 1223:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1224:        {
        -: 1225:            //gain coins equal to trashed card
    #####: 1226:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:            //trash card
    #####: 1228:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1229:        }
        -: 1230:
        -: 1231:        //discard card
    #####: 1232:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:        return 0;
        -: 1234:
        -: 1235:    case sea_hag:
    #####: 1236:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1237:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1238:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1239:                state->deckCount[i]--;
    #####: 1240:                state->discardCount[i]++;
    #####: 1241:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1242:            }
    #####: 1243:        }
    #####: 1244:        return 0;
        -: 1245:
        -: 1246:    case treasure_map:
        -: 1247:        //search hand for another treasure_map
    #####: 1248:        index = -1;
    #####: 1249:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1250:        {
    #####: 1251:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1252:            {
    #####: 1253:                index = i;
    #####: 1254:                break;
        -: 1255:            }
    #####: 1256:        }
    #####: 1257:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1258:        {
        -: 1259:            //trash both treasure cards
    #####: 1260:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:            discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:            //gain 4 Gold cards
    #####: 1264:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1265:            {
    #####: 1266:                gainCard(gold, state, 1, currentPlayer);
    #####: 1267:            }
        -: 1268:
        -: 1269:            //return success
    #####: 1270:            return 1;
        -: 1271:        }
        -: 1272:
        -: 1273:        //no second treasure_map found in hand
    #####: 1274:        return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
    #####: 1278:}
        -: 1279:
function discardCard called 37446 returned 100% blocks executed 100%
        -: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
    37446: 1284:    if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1285:    {
        -: 1286:        //add card to played pile
    37446: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    37446: 1288:        state->playedCardCount++;
    37446: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
    37446: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
    37446: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 9%
branch  1 taken 91%
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
     3367: 1298:        state->handCount[currentPlayer]--;
     3367: 1299:    }
    34079: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 8%
branch  1 taken 92%
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
     2789: 1303:        state->handCount[currentPlayer]--;
     2789: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
    31290: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
    31290: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
    31290: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
    37446: 1315:    return 0;
        -: 1316:}
        -: 1317:
function gainCard called 1865 returned 100% blocks executed 81%
        -: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
     1865: 1323:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1324:    {
    #####: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
     1865: 1333:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1334:    {
    #####: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:        state->deckCount[player]++;
    #####: 1337:    }
     1865: 1338:    else if (toFlag == 2)
branch  0 taken 1%
branch  1 taken 99%
        -: 1339:    {
        2: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1341:        state->handCount[player]++;
        2: 1342:    }
        -: 1343:    else
        -: 1344:    {
     1863: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
     1863: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
     1865: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
     1865: 1352:    return 0;
     1865: 1353:}
        -: 1354:
function updateCoins called 15023 returned 100% blocks executed 100%
        -: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
    15023: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
   275462: 1363:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11%
        -: 1364:    {
   122708: 1365:        if (state->hand[player][i] == copper)
branch  0 taken 3%
branch  1 taken 97%
        -: 1366:        {
     4255: 1367:            state->coins += 1;
     4255: 1368:        }
   118453: 1369:        else if (state->hand[player][i] == silver)
branch  0 taken 4%
branch  1 taken 96%
        -: 1370:        {
     4289: 1371:            state->coins += 2;
     4289: 1372:        }
   114164: 1373:        else if (state->hand[player][i] == gold)
branch  0 taken 4%
branch  1 taken 96%
        -: 1374:        {
     4262: 1375:            state->coins += 3;
     4262: 1376:        }
   122708: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
    15023: 1380:    state->coins += bonus;
        -: 1381:
    15023: 1382:    return 0;
        -: 1383:}
        -: 1384:
function mineCard called 4 returned 100% blocks executed 100%
        -: 1385:int mineCard(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -: 1386:    //printf("---->Starting mine function!\n");
        -: 1387:    int i;
        -: 1388:    int j;
        4: 1389:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1390:    
        -: 1391:    //Introducing bug: Does not check if the selected card is a treasure card
        -: 1392:    /*
        -: 1393:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1394:    {
        -: 1395:        return -1;
        -: 1396:    }
        -: 1397:    */
        7: 1398:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 75%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 100%
        -: 1399:    {
        1: 1400:        return -1;
        -: 1401:    }
        -: 1402:
        3: 1403:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 taken 33%
branch  1 taken 67%
        -: 1404:    {
        1: 1405:        return -1;
        -: 1406:    }
        -: 1407:
        2: 1408:    gainCard(choice2, state, 2, currentPlayer);
        -: 1409:
        -: 1410:    //discard card from hand
        -: 1411:    //Introducing bug as does not discard the trashed card from hand
        -: 1412:    //discardCard(handPos, currentPlayer, state, 0);
        -: 1413:
        -: 1414:    //discard trashed card
        8: 1415:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -: 1416:    {
        4: 1417:        if (state->hand[currentPlayer][i] == j)
branch  0 taken 50%
branch  1 taken 50%
        -: 1418:        {
        2: 1419:            discardCard(i, currentPlayer, state, 0);
        2: 1420:            break;
        -: 1421:        }
        2: 1422:    }
        -: 1423:    
        2: 1424:    return 0;
        -: 1425:    
        4: 1426:}
        -: 1427:
function baronCard called 2505 returned 100% blocks executed 92%
        -: 1428:int baronCard(struct gameState *state, int choice1, int currentPlayer){
        -: 1429:    //printf("---->Starting baron function!\n");
        -: 1430:    //state->numBuys++;//Increase buys by 1!
     2505: 1431:    if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 53%
branch  1 taken 47%
     1326: 1432:        int p = 0;//Iterator for hand!
     1326: 1433:        int card_not_discarded = 1;//Flag for discard set!
    20824: 1434:        while(card_not_discarded) {
branch  0 taken 87%
branch  1 taken 13%
     9086: 1435:            if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 7%
branch  1 taken 93%
      647: 1436:                state->coins += 4;//Add 4 coins to the amount of coins
      647: 1437:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
      647: 1438:                state->discardCount[currentPlayer]++;
     8802: 1439:                for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 85%
branch  1 taken 15%
     3754: 1440:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
     3754: 1441:                }
      647: 1442:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
      647: 1443:                state->handCount[currentPlayer]--;
      647: 1444:                card_not_discarded = 0;//Exit the loop
      647: 1445:            }
     8439: 1446:            else if (p > state->handCount[currentPlayer]) {
branch  0 taken 8%
branch  1 taken 92%
        -: 1447:                if(DEBUG) {
        -: 1448:                    printf("No estate cards in your hand, invalid choice\n");
        -: 1449:                    printf("Must gain an estate if there are any\n");
        -: 1450:                }
      679: 1451:                if (supplyCount(estate, state) > 0) {
branch  0 taken 100%
branch  1 taken 0%
      679: 1452:                    gainCard(estate, state, 0, currentPlayer);
        -: 1453:
      679: 1454:                    state->supplyCount[estate]--;//Decrement estates
      679: 1455:                    if (supplyCount(estate, state) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1456:                        isGameOver(state);
    #####: 1457:                    }
      679: 1458:                }
      679: 1459:                card_not_discarded = 0;//Exit the loop
      679: 1460:            }
        -: 1461:
        -: 1462:            else {
     7760: 1463:                p++;//Next card
        -: 1464:            }
        -: 1465:        }
     1326: 1466:    }
        -: 1467:
        -: 1468:    else {
     1179: 1469:        if (supplyCount(estate, state) > 0) {
branch  0 taken 99%
branch  1 taken 1%
     1178: 1470:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1471:
        -: 1472:            //state->supplyCount[estate]--;//Decrement Estates
     1178: 1473:            if (supplyCount(estate, state) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1474:                isGameOver(state);
    #####: 1475:            }
     1178: 1476:        }
        -: 1477:    }
        -: 1478:    
     2505: 1479:    return 0;
        -: 1480:
        -: 1481:}
        -: 1482:
function minionCard called 2505 returned 100% blocks executed 100%
        -: 1483:int minionCard(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2){
        -: 1484:    //printf("---->Starting minionCard function!\n");
        -: 1485:    int i;
        -: 1486:    int j;
     2505: 1487:    state->numActions++;
        -: 1488:
        -: 1489:    //discard card from hand
     2505: 1490:    discardCard(handPos, currentPlayer, state, 0);
        -: 1491:
     2505: 1492:	if (choice1)
branch  0 taken 52%
branch  1 taken 48%
        -: 1493:    {
     1298: 1494:        state->coins = state->coins + 2;
     1298: 1495:    }
     1207: 1496:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100%
branch  1 taken 0%
        -: 1497:    {
        -: 1498:        //discard hand
    20116: 1499:        while(numHandCards(state) > 0)
branch  0 taken 88%
branch  1 taken 12%
        -: 1500:        {
     8851: 1501:            discardCard(handPos, currentPlayer, state, 0);
        -: 1502:        }
        -: 1503:
        -: 1504:        //draw 4
        -: 1505:        //bug introduced, draw 5 cards
    14484: 1506:        for (i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1507:        {
     6035: 1508:            drawCard(currentPlayer, state);
     6035: 1509:        }
        -: 1510:
        -: 1511:        //other players discard hand and redraw if hand size > 4
     9650: 1512:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1513:        {
     3618: 1514:            if (i != currentPlayer)
branch  0 taken 74%
branch  1 taken 26%
        -: 1515:            {
        -: 1516:                //if ( state->handCount[i] > 4 )//introducing a bug that doesn't check if other player's hand has more than 4 cards
        -: 1517:                //{
        -: 1518:                    //discard hand
    57560: 1519:                    while( state->handCount[i] > 0 )
branch  0 taken 91%
branch  1 taken 9%
        -: 1520:                    {
    26086: 1521:                        discardCard(handPos, i, state, 0);
        -: 1522:                    }
        -: 1523:
        -: 1524:                    //draw 4
    26940: 1525:                    for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1526:                    {
    10776: 1527:                        drawCard(i, state);
    10776: 1528:                    }
        -: 1529:                //}
     2694: 1530:            }
     3618: 1531:        }
        -: 1532:
     1207: 1533:    }    
     2505: 1534:    return 0;
        -: 1535:}
        -: 1536:
function tributeCard called 10005 returned 100% blocks executed 100%
        -: 1537:int tributeCard(struct gameState *state, int nextPlayer, int currentPlayer, int *tributeRevealedCards){
        -: 1538:    //printf("---->Starting tributeCard function!\n");
        -: 1539:    int i;
        -: 1540:    
    10005: 1541:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 19%
branch  1 taken 81%
     1922: 1542:        if (state->deckCount[nextPlayer] > 0) {
branch  0 taken 33%
branch  1 taken 67%
      630: 1543:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      630: 1544:            state->deckCount[nextPlayer]--;
      630: 1545:        }
     1292: 1546:        else if (state->discardCount[nextPlayer] > 0) {
branch  0 taken 51%
branch  1 taken 49%
      659: 1547:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
      659: 1548:            state->discardCount[nextPlayer]--;
      659: 1549:        }
        -: 1550:        else {
        -: 1551:            //No Card to Reveal
        -: 1552:            if (DEBUG) {
        -: 1553:                printf("No cards to reveal\n");
        -: 1554:            }
        -: 1555:        }
     1922: 1556:    }
        -: 1557:
        -: 1558:    else {
     8083: 1559:        if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 15%
branch  1 taken 85%
     6200: 1560:            for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 taken 60%
branch  1 taken 40%
     1873: 1561:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     1873: 1562:                state->deckCount[nextPlayer]++;
     1873: 1563:                state->discard[nextPlayer][i] = -1;
     1873: 1564:                state->discardCount[nextPlayer]--;
     1873: 1565:            }
        -: 1566:
     1227: 1567:            shuffle(nextPlayer,state);//Shuffle the deck
     1227: 1568:        }
     8083: 1569:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     8083: 1570:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     8083: 1571:        state->deckCount[nextPlayer]--;
     8083: 1572:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     8083: 1573:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     8083: 1574:        state->deckCount[nextPlayer]--;
        -: 1575:    }
        -: 1576:    //Introducing bug as to not consider duplicates
        -: 1577:    /*
        -: 1578:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
        -: 1579:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1580:        state->playedCardCount++;
        -: 1581:        tributeRevealedCards[1] = -1;
        -: 1582:    }
        -: 1583:    */
        -: 1584:
    80040: 1585:    for (i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25%
    88851: 1586:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 99%
        -: 1587:            //state->coins += 2; introducing bug:
     1235: 1588:            state->coins += 5;
     1235: 1589:        }
        -: 1590:
   138108: 1591:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 98%
branch  1 taken 2%
branch  2 taken 98%
branch  3 taken 2%
branch  4 taken 98%
branch  5 taken 2%
branch  6 taken 93%
branch  7 taken 7%
branch  8 taken 2%
branch  9 taken 98%
     3580: 1592:            drawCard(currentPlayer, state);
     3580: 1593:            drawCard(currentPlayer, state);
     3580: 1594:        }
        -: 1595:        else { //Action Card
    25200: 1596:            state->numActions = state->numActions + 2;
        -: 1597:        }
    30015: 1598:    }
    10005: 1599:    return 0;
        -: 1600:}
        -: 1601:
function ambassadorCard called 4 returned 100% blocks executed 62%
        -: 1602:int ambassadorCard(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state){
        -: 1603:    
        -: 1604:    //printf("---->Starting ambassadorCard function!\n");
        -: 1605:    int i;
        4: 1606:    int j = 0;		//used to check if player has enough cards to discard
        -: 1607:    //Introduing bug here, does not bound the player's choice to an upper limit of 2 and lower limit of 0
        -: 1608:    /*
        -: 1609:    if (choice2 > 2 || choice2 < 0)
        -: 1610:    {
        -: 1611:        return -1;
        -: 1612:    }
        -: 1613:    */
        4: 1614:    if (choice1 == handPos)
branch  0 taken 0%
branch  1 taken 100%
        -: 1615:    {
    #####: 1616:        return -1;
        -: 1617:    }
        -: 1618:
       32: 1619:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1620:    {
       22: 1621:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 83%
branch  1 taken 17%
branch  2 taken 0%
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -: 1622:        {
    #####: 1623:            j++;
    #####: 1624:        }
       12: 1625:    }
        4: 1626:    if (j < choice2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1627:    {
        2: 1628:        return -1;
        -: 1629:    }
        -: 1630:
        -: 1631:    if (DEBUG)
        -: 1632:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1633:
        -: 1634:    //increase supply count for choosen card by amount being discarded
        2: 1635:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1636:
        -: 1637:    //each other player gains a copy of revealed card
       16: 1638:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1639:    {
        -: 1640:        //Introducing a bug here that the current player will also gain a copy of the revealed card
        -: 1641:        //if (i != currentPlayer)
        -: 1642:        //{
        6: 1643:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1644:        //}
        6: 1645:    }
        -: 1646:
        -: 1647:    //discard played card from hand
        2: 1648:    discardCard(handPos, currentPlayer, state, 0);
        -: 1649:
        -: 1650:    //trash copies of cards returned to supply
        4: 1651:    for (j = 0; j < choice2; j++)
branch  0 taken 0%
branch  1 taken 100%
        -: 1652:    {
    #####: 1653:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1654:        {
    #####: 1655:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1656:            {
    #####: 1657:                discardCard(i, currentPlayer, state, 1);
    #####: 1658:                break;
        -: 1659:            }
    #####: 1660:        }
    #####: 1661:    }
        -: 1662:
        2: 1663:    return 0;
        4: 1664:}
        -: 1665:
        -: 1666:
        -: 1667:
        -: 1668://end of dominion.c
        -: 1669:
